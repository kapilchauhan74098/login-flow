/**========================================================================================
* Name: FCIBFSC_IntegrationFactory
* Description: This class is use to prepare a instance of service class and call invokeCallout method 
* Created Date:
* Created By: Kapil Chauhan (Deloitte )
===========================================================================================*/ 
public with sharing class FCIBFSC_IntegrationFactory {
/**========================================================================================
* Method Name: invokeCallout
* Description: This class is use to prepare a instance of service class and call invokeCallout method 
* Input Parameters: string interfaceName, Map<String, Object> mapInputParams
* Output Parameters : List<Object>
* Created By: Kapil Chauhan (Deloitte )
===========================================================================================*/     
    public static List<Object> invokeCallout(string interfaceName, Map<String, Object> mapInputParams){
        List<object> objectList; 
        try{
            //Instantiate the class with the interface object reference
            Map<String, SObject> mdtMap = new FCIBFSC_UtilityService().getAllRecordsMap('FCIBFSC_IntegrationMetadata__mdt');
            
            Type serviceClassType;
            if(!mdtMap.isEmpty() && mdtMap.get(interfaceName)!=null){
                serviceClassType = type.forName((String)mdtMap.get(interfaceName).get('FCIBFSC_ServiceClassName__c'));
            }
            if(serviceClassType==null){
                // throw exception
            }
            FCIBFSC_IIntegrationService service = (FCIBFSC_IIntegrationService)serviceClassType.newInstance();
            
            //invoke the method of service class
            objectList = service.invokeCallout(interfaceName, mapInputParams);
         }
        catch(Exception e){
            //LOG_LogMessageUtility.logMessage(e, 'IntegrationFactory', 'invokeCallout', e.getMessage(), true);      
        }
        return objectList;
    }
 
}
